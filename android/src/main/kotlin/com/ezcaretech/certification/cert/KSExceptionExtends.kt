// package com.ezcaretech.certification.cert

// import com.lumensoft.ks.KSException

// class KSExceptionExtends(var a: String = "",
//                          var errorCode : Int = 0,
//                          private val ksException: KSException = KSException()) {

//     var ksExceptionMessage = ksException.message
//     var SUCC : Int = 0
//     val KS_INVALID_PASSWORD = -1001
//     val KS_FAIL_TO_CHANGE_PASSWORD = -1002
//     val KS_INVALID_PWD_SHORT_LENGTH = -1501
//     val KS_INVALID_PWD_NO_ALPHABET = -1502
//     val KS_INVALID_PWD_NO_NUMERIC = -1503
//     val KS_INVALID_PWD_NO_SPECIAL_CHAR = -1504
//     val KS_INVALID_PWD_UNAVAILABLE_CHAR = -1505
//     val KS_ERR_SIGN_FAIL = -1101
//     val KS_ERR_SIGN_NOT_SUPPORTED_ALG_ID = -1102
//     val KS_FAIL_TO_GET_VIDRANDOM = -1003
//     val KS_FAIL_TO_SELF_VERIFY = -1004
//     val KS_FAIL_TO_CRL_VERIFY = -1005
//     val KS_FAIL_TO_GET_RANDOM = -1006
//     val KS_FAIL_TO_GET_ENVELOPE = -1007
//     val KS_ERR_FAIL_TO_CONNECT = -210
//     val KS_ERR_FAIL_TO_HANDSHAKE = -211
//     val KS_ERR_FAIL_TO_KEY_SHARING = -212
//     val KS_ERR_FAIL_TO_DECODE_CERT = -213
//     val KS_ERR_FAIL_TO_READ_MSG = -214
//     val KS_ERR_FAIL_TO_WRITE_MSG = -215
//     val KS_ERR_FAIL_TO_ENC_MSG = -216
//     val KS_ERR_FAIL_TO_DEC_MSG = -217
//     val KS_ERR_CMP_FAIL_TO_UPDATE = -1201
//     val KS_FAIL_CONNECT_SERVER = -1000
//     val KS_FAIL_EXCHANGE_KEY = -2000
//     val FAIL_PKCS_DEC_PRIKEY = -3001
//     val FAIL_PKCS_VERIFY = -3002
//     val FAIL_PKCS_IO = -3003
//     val FAIL_PKCS_BUFFER_OVERFLOW = -3004
//     val FAIL_PKCS_ETC = -3005
//     val FAIL_CERT_INVALID_INPUT = -3006
//     val FAIL_CERT_DELETE = -3007
//     val FAIL_KEY_DELETE = -3008
//     val QR_READING_CERT_IS_FAILED = -3100
//     val QR_SERVERCERT_IS_INVALID = -3101
//     val QR_NO_SUCH_ALGORITHM = -3102
//     val QR_KEY_MANAGEMENT = -3103
//     val QR_KEY_STORE = -3104
//     val QR_UNCOVERABLE_KEY = -3105
//     val QR_UNSUPPORTED_ENCODING = -3106
//     val QR_CLIENT_PROTOCOL = -3107
//     val QR_NO_PEER_CERTIFICATE = -3108
//     val QR_REQUEST_IS_FAILED = -3109
//     val QR_RESPONSE_IS_FAILED = -3110
//     val QR_PARSING_RESULT_IS_FAILED = -3111
//     val QR_VALUE_IS_INVALID = -3112
//     val QR_CODE_IS_INVALID = -3113
//     val FAIL_HSA_READ_CERT = -3201
//     val FAIL_HSA_ENCRYPTION = -3202
//     val FAIL_HSA_DECRYPTION = -3203
//     val FAIL_HSA_KEY_INIT = -3204
//     val FAIL_HSA_KEY_FINAL = -3205
//     val FAIL_HSA_NOT_MATCHED = -3206
//     val FAIL_HSA_NETWORK_READ = -3207
//     val FAIL_HSA_NETWORK_WRITE = -3208
//     val FAIL_HSA_NETWORK_CONNECTION = -3209
//     val FAIL_HSA_HANDSHAKE = -3210
//     val FAIL_HSA_PUTIDV = -3211
//     val FAIL_HSA_PUT_PHONENUM = -3212
//     val FAIL_TRANSKEY_DECRYPT = -3501
//     val CRYPTO_BLOCKSIZE_IS_INVALID = -3502
//     val CRYPTO_PLAINTEXT_IS_NULL = -3503
//     val CRYPTO_IV_IS_NULL = -3504
//     val CRYPTO_KEY_IS_NULL = -3505
//     val CRYPTO_PADDING_IS_INVALID = -3506
//     val CRYPTO_ENCRYPTING_IS_FAILED = -3507
//     val CRYPTO_DECRYPTING_IS_FAILED = -3508
//     val KSCERTIFICATE_IS_NULL = -3602
//     val PASSWORD_IS_NULL = -3603
//     val FAIL_MAKECERTLIST = -3604
//     val APP_NATIVE_INIT_SUCC = 3700
//     val SYSTEM_NATIVE_INIT_SUCC = 3701
//     val PATH_NATIVE_INIT_SUCC = 3702
//     val FAIL_NOT_EXIST_LIBRARY = -3703
//     val FAIL_CRL_READ_CERT = "인증서를 로드할 수 없습니다."
//     val FAIL_CRL_CONNECT_SERVER = "CRL 검증 서버와 연결할 수 없습니다."
//     val FAIL_CRL_HANDSHAKE = "CRL 검증 서버와 키교환을 실패하였습니다."
//     val FAIL_CRL_SEND_SERVER = "CRL 검증 서버로 메시지를 전송할 수 없습니다."
//     val FAIL_CRL_RECV_SERVER = "CRL 검증 서버로부터 메시지를 수신할 수 없습니다."
//     val FAIL_CRL_INVALID_CERT = "해당 인증서는 유효하지 않은 인증서입니다."
//     val SUCC_CRL_VALID_CERT = "해당 인증서는 유효한 인증서입니다."

// }